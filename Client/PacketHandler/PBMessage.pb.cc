// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCLoginRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCLoginRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMessage_2eproto() {
  protobuf_AddDesc_PBMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CSLogin_descriptor_ = file->message_type(0);
  static const int CSLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, commandid_),
  };
  CSLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSLogin_descriptor_,
      CSLogin::default_instance_,
      CSLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, _internal_metadata_),
      -1);
  SCLoginRet_descriptor_ = file->message_type(1);
  static const int SCLoginRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginRet, ret_),
  };
  SCLoginRet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCLoginRet_descriptor_,
      SCLoginRet::default_instance_,
      SCLoginRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginRet, _has_bits_[0]),
      -1,
      -1,
      sizeof(SCLoginRet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginRet, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSLogin_descriptor_, &CSLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCLoginRet_descriptor_, &SCLoginRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMessage_2eproto() {
  delete CSLogin::default_instance_;
  delete CSLogin_reflection_;
  delete SCLoginRet::default_instance_;
  delete SCLoginRet_reflection_;
}

void protobuf_AddDesc_PBMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017PBMessage.proto\"\034\n\007CSLogin\022\021\n\tcommandI"
    "d\030\001 \002(\014\"\031\n\nSCLoginRet\022\013\n\003ret\030\001 \001(\005", 74);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMessage.proto", &protobuf_RegisterTypes);
  CSLogin::default_instance_ = new CSLogin();
  SCLoginRet::default_instance_ = new SCLoginRet();
  CSLogin::default_instance_->InitAsDefaultInstance();
  SCLoginRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMessage_2eproto {
  StaticDescriptorInitializer_PBMessage_2eproto() {
    protobuf_AddDesc_PBMessage_2eproto();
  }
} static_descriptor_initializer_PBMessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CSLogin::kCommandIdFieldNumber;
#endif  // !_MSC_VER

CSLogin::CSLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSLogin)
}

void CSLogin::InitAsDefaultInstance() {
}

CSLogin::CSLogin(const CSLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSLogin)
}

void CSLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  commandid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLogin::~CSLogin() {
  // @@protoc_insertion_point(destructor:CSLogin)
  SharedDtor();
}

void CSLogin::SharedDtor() {
  commandid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLogin_descriptor_;
}

const CSLogin& CSLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CSLogin* CSLogin::default_instance_ = NULL;

CSLogin* CSLogin::New(::google::protobuf::Arena* arena) const {
  CSLogin* n = new CSLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSLogin::Clear() {
  if (has_commandid()) {
    commandid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes commandId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_commandid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSLogin)
  return false;
#undef DO_
}

void CSLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSLogin)
  // required bytes commandId = 1;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->commandid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSLogin)
}

::google::protobuf::uint8* CSLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSLogin)
  // required bytes commandId = 1;
  if (has_commandid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->commandid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSLogin)
  return target;
}

int CSLogin::ByteSize() const {
  int total_size = 0;

  // required bytes commandId = 1;
  if (has_commandid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->commandid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLogin::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSLogin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSLogin>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLogin::MergeFrom(const CSLogin& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandid()) {
      set_has_commandid();
      commandid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commandid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLogin::CopyFrom(const CSLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSLogin::Swap(CSLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSLogin::InternalSwap(CSLogin* other) {
  commandid_.Swap(&other->commandid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLogin_descriptor_;
  metadata.reflection = CSLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSLogin

// required bytes commandId = 1;
bool CSLogin::has_commandid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSLogin::set_has_commandid() {
  _has_bits_[0] |= 0x00000001u;
}
void CSLogin::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSLogin::clear_commandid() {
  commandid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commandid();
}
 const ::std::string& CSLogin::commandid() const {
  // @@protoc_insertion_point(field_get:CSLogin.commandId)
  return commandid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSLogin::set_commandid(const ::std::string& value) {
  set_has_commandid();
  commandid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSLogin.commandId)
}
 void CSLogin::set_commandid(const char* value) {
  set_has_commandid();
  commandid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSLogin.commandId)
}
 void CSLogin::set_commandid(const void* value, size_t size) {
  set_has_commandid();
  commandid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSLogin.commandId)
}
 ::std::string* CSLogin::mutable_commandid() {
  set_has_commandid();
  // @@protoc_insertion_point(field_mutable:CSLogin.commandId)
  return commandid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSLogin::release_commandid() {
  clear_has_commandid();
  return commandid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSLogin::set_allocated_commandid(::std::string* commandid) {
  if (commandid != NULL) {
    set_has_commandid();
  } else {
    clear_has_commandid();
  }
  commandid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commandid);
  // @@protoc_insertion_point(field_set_allocated:CSLogin.commandId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SCLoginRet::kRetFieldNumber;
#endif  // !_MSC_VER

SCLoginRet::SCLoginRet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCLoginRet)
}

void SCLoginRet::InitAsDefaultInstance() {
}

SCLoginRet::SCLoginRet(const SCLoginRet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SCLoginRet)
}

void SCLoginRet::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCLoginRet::~SCLoginRet() {
  // @@protoc_insertion_point(destructor:SCLoginRet)
  SharedDtor();
}

void SCLoginRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCLoginRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCLoginRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCLoginRet_descriptor_;
}

const SCLoginRet& SCLoginRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

SCLoginRet* SCLoginRet::default_instance_ = NULL;

SCLoginRet* SCLoginRet::New(::google::protobuf::Arena* arena) const {
  SCLoginRet* n = new SCLoginRet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCLoginRet::Clear() {
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SCLoginRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCLoginRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCLoginRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCLoginRet)
  return false;
#undef DO_
}

void SCLoginRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCLoginRet)
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCLoginRet)
}

::google::protobuf::uint8* SCLoginRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCLoginRet)
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCLoginRet)
  return target;
}

int SCLoginRet::ByteSize() const {
  int total_size = 0;

  // optional int32 ret = 1;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCLoginRet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCLoginRet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SCLoginRet>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCLoginRet::MergeFrom(const SCLoginRet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SCLoginRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLoginRet::CopyFrom(const SCLoginRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLoginRet::IsInitialized() const {

  return true;
}

void SCLoginRet::Swap(SCLoginRet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCLoginRet::InternalSwap(SCLoginRet* other) {
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCLoginRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCLoginRet_descriptor_;
  metadata.reflection = SCLoginRet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCLoginRet

// optional int32 ret = 1;
bool SCLoginRet::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SCLoginRet::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void SCLoginRet::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void SCLoginRet::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::google::protobuf::int32 SCLoginRet::ret() const {
  // @@protoc_insertion_point(field_get:SCLoginRet.ret)
  return ret_;
}
 void SCLoginRet::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:SCLoginRet.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
